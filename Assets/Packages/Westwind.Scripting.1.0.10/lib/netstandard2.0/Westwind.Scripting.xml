<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Scripting</name>
    </assembly>
    <members>
        <member name="T:Westwind.Scripting.CSharpScriptExecution">
             <summary>
             Class that can be used to execute code snippets or entire blocks of methods
             dynamically. Two methods are provided:
            
             * ExecuteCode -  executes code. Pass parameters and return a value
             * ExecuteMethod - lets you provide one or more method bodies to execute
             * Evaluate - Evaluates an expression on the fly (uses ExecuteCode internally)
             * CompileClass - compiles a class and returns the a class instance
            
             Assemblies used for execution are cached and are reused for a given block
             of code provided.
             </summary>
        </member>
        <member name="F:Westwind.Scripting.CSharpScriptExecution.CachedAssemblies">
            <summary>
            Internal list of assemblies that are cached for snippets of the same type.
            List holds a list of cached assemblies with a hash code for the code executed as
            the key.
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Namespaces">
            <summary>
            List of additional namespaces to add to the script
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.References">
            <summary>
            List of additional assembly references that are added to the
            compiler parameters in order to execute the script code.
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.OutputAssembly">
            <summary>
            Filename for the output assembly to generate. If empty the
            assembly is generated in memory (dynamic filename managed by
            the .NET runtime)
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.GeneratedClassCode">
            <summary>
            Last generated code for this code snippet
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.SaveGeneratedCode">
            <summary>
            Determines whether GeneratedCode will be set with the source
            code for the full generated class
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ThrowExceptions">
            <summary>
            If true throws exceptions when executing the code rather
            than setting the `Error`, `ErrorMessage` and `LastException`
            properties.
            
            Note: Compilation errors will not throw, but always set properties!
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ErrorMessage">
            <summary>
            Error message if an error occurred during the invoked
            method or script call
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Error">
            <summary>
            Error flag that is set if an error occurred during the invoked
            method or script call
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ErrorType">
            <summary>
            Determines whether the error is a compile time
            error or runtime error
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.Assembly">
            <summary>
            Internal reference to the Assembly Generated
            </summary>
        </member>
        <member name="P:Westwind.Scripting.CSharpScriptExecution.ObjectInstance">
            <summary>
            Internal reference to the generated type that
            is to be invoked
            </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteMethod(System.String,System.String,System.Object[])">
             <summary>
             Executes a complete method by wrapping it into a class, compiling
             and instantiating the class and calling the method.
            
             Class should include full class header (instance type, return value and parameters)
            
             Example:
             "public string HelloWorld(string name) { return name; }"
            
             "public async Task&lt;string&gt; HelloWorld(string name) { await Task.Delay(1); return name; }"
            
             Async Method Note: Keep in mind that
             the method is not cast to that result - it's cast to object so you
             have to unwrap it:
             var objTask = script.ExecuteMethod(asyncCodeMethod); // object result
             var result = await (objTask as Task&lt;string&gt;);  //  cast and unwrap
             </summary>
             <param name="code">One or more complete methods.</param>
             <param name="methodName">Name of the method to call.</param>
             <param name="parameters">any number of variable parameters</param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteMethod``1(System.String,System.String,System.Object[])">
             <summary>
             Executes a complete method by wrapping it into a class, compiling
             and instantiating the class and calling the method.
            
             Class should include full class header (instance type, return value and parameters)
            
             Example:
             "public string HelloWorld(string name) { return name; }"
            
             "public async Task&lt;string&gt; HelloWorld(string name) { await Task.Delay(1); return name; }"
            
             Async Method Note: Keep in mind that
             the method is not cast to that result - it's cast to object so you
             have to unwrap it:
             var objTask = script.ExecuteMethod(asyncCodeMethod); // object result
             var result = await (objTask as Task&lt;string&gt;);  //  cast and unwrap
             </summary>
             <param name="code">One or more complete methods.</param>
             <param name="methodName">Name of the method to call.</param>
             <param name="parameters">any number of variable parameters</param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteMethodAsync``1(System.String,System.String,System.Object[])">
             <summary>
             Executes a complete async method by wrapping it into a class, compiling
             and instantiating the class and calling the method and unwrapping the
             task result.
            
             Class should include full class header (instance type, return value and parameters)
            
             "public async Task&lt;string&gt; HelloWorld(string name) { await Task.Delay(1); return name; }"
            
             Async Method Note: Keep in mind that
             the method is not cast to that result - it's cast to object so you
             have to unwrap it:
             var objTask = script.ExecuteMethod(asyncCodeMethod); // object result
             var result = await (objTask as Task&lt;string&gt;);  //  cast and unwrap
             </summary>
             <param name="code">One or more complete methods.</param>
             <param name="methodName">Name of the method to call.</param>
             <param name="parameters">any number of variable parameters</param>
             <typeparam name="TResult">The result type (string, object, etc.) of the method</typeparam>
             <returns>result value of the method</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.Evaluate(System.String,System.Object[])">
            <summary>
            Evaluates a single value or expression that returns a value.
            </summary>
            <param name="code"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.Evaluate``1(System.String,System.Object[])">
            <summary>
            Evaluates a single value or expression that returns a value.
            </summary>
            <param name="code"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.EvaluateAsync(System.String,System.Object[])">
             <summary>
             Evaluates an awaitable expression that returns a value
            
             Example:
             script.EvaluateAsync("await ActiveEditor.GetSelection()",model);
             </summary>
             <param name="code">Code to execute</param>
             <param name="parameters">Optional parameters to pass. Access as `object parameters[]` in expression</param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.EvaluateAsync``1(System.String,System.Object[])">
             <summary>
             Evaluates an awaitable expression that returns a value
            
             Example:
             script.EvaluateAsync<string></string>("await ActiveEditor.GetSelection()",model);
             </summary>
             <param name="code">code to execute</param>
             <param name="parameters">Optional parameters to pass. Access as `object parameters[]` in expression</param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCode(System.String,System.Object[])">
            <summary>
            Executes a snippet of code. Pass in a variable number of parameters
            (accessible via the parameters[0..n] array) and return an object parameter.
            Code should include:  return (object) SomeValue as the last line or return null
            </summary>
            <param name="code">The code to execute</param>
            <param name="parameters">The parameters to pass the code
            You can reference parameters as @0, @1, @2 in code to map
            to the parameter array items (ie. @1 instead of parameters[1])
            </param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCode``1(System.String,System.Object[])">
            <summary>
            Executes a snippet of code. Pass in a variable number of parameters
            (accessible via the parameters[0..n] array) and return an object parameter.
            Code should include:  return (object) SomeValue as the last line or return null
            </summary>
            <param name="code">The code to execute</param>
            <param name="parameters">The parameters to pass the code
            You can reference parameters as @0, @1, @2 in code to map
            to the parameter array items (ie. @1 instead of parameters[1])
            </param>
            <returns>Result cast to a type you specify</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeAsync(System.String,System.Object[])">
             <summary>
             Executes a snippet of code. Pass in a variable number of parameters
             (accessible via the parameters[0..n] array) and return an `object` value.
            
             Code should always return a result:
             include:  `return (object) SomeValue` or `return null`
             </summary>
             <param name="code">The code to execute</param>
             <param name="parameters">The parameters to pass the code
             You can reference parameters as @0, @1, @2 in code to map
             to the parameter array items (ie. @1 instead of parameters[1])
             </param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeAsync``1(System.String,System.Object[])">
             <summary>
             Executes a snippet of code. Pass in a variable number of parameters
             (accessible via the parameters[0..n] array) and return an `object` value.
            
             Code should always return a result:
             include:  `return (object) SomeValue` or `return null`
             </summary>
             <param name="code">The code to execute</param>
             <param name="parameters">The parameters to pass the code
             You can reference parameters as @0, @1, @2 in code to map
             to the parameter array items (ie. @1 instead of parameters[1])
             </param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeAsync``2(System.String,``1)">
             <summary>
             Executes a snippet of code. Pass in a variable number of parameters
             (accessible via the parameters[0..n] array) and return an `object` value.
            
             Code should always return a result:
             include:  `return (object) SomeValue` or `return null`
             </summary>
             <param name="code">The code to execute</param>
             <param name="model">an optional model to pass to the code which is
             then accessible as a `Model` property in the code.
             </param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeFromAssembly(System.String,System.Reflection.Assembly,System.Object[])">
            <summary>
            Executes a method from an assembly that was previously compiled
            </summary>
            <param name="code"></param>
            <param name="assembly"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.ExecuteCodeFromAssemblyAsync``1(System.String,System.Reflection.Assembly,System.Object[])">
             <summary>
             Executes a method from an assembly that was previously compiled.
            
             Looks in cached assemblies
             </summary>
             <param name="code"></param>
             <param name="assembly"></param>
             <param name="parameters"></param>
             <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CompileAssembly(System.String)">
            <summary>
            Compiles and runs the source code for a complete assembly.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CompileClass(System.String)">
            <summary>
            This method compiles a class and hands back a
            dynamic reference to that class that you can
            call members on.
            </summary>
            <param name="code">Fully self-contained C# class</param>
            <returns>Instance of that class or null</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CompileClassToType(System.String)">
            <summary>
            This method compiles a class and hands back a
            dynamic reference to that class that you can
            call members on.
            </summary>
            <param name="code">Fully self-contained C# class</param>
            <returns>Instance of that class or null</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddDefaultReferencesAndNamespaces">
             <summary>
             Adds core system assemblies and namespaces for basic operation.
            
             Any additional references need to be explicitly added.
            
             Alternatelively use: AddLoadedReferences()
             </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddDefaultReferencesAndNamespaces(System.Boolean)">
             <summary>
             Adds basic System assemblies and namespaces so basic
             operations work.
             </summary>
             <param name="dontLoadLoadedAssemblies">
             In .NET Core it's recommended you add all host assemblies to ensure
             that any referenced assemblies are also accessible in your
             script code. Important as in Core there are many small libraries
             that comprise the core BCL/FCL.
            
             For .NET Full this is not as important as most BCL/FCL features
             are automatically pulled by the System and System.Core default
             inclusions.
            
             By default host assemblies are loaded.
             </param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddLoadedReferences">
             <summary>
             Explicitly adds all referenced assemblies of the currently executing
             process. Also adds default namespaces.
            
             Useful in .NET Core to ensure that all those little tiny system assemblies
             that comprise NetCoreApp.App etc. dependencies get pulled in.
            
             For full framework this is less important as the base runtime pulls
             in all the system and system.core types.
            
             Alternative: use LoadDefaultReferencesAndNamespaces() and manually add
                           
             </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssembly(System.String)">
            <summary>
            Adds an assembly from disk. Provide a full path if possible
            or a path that can resolve as part of the application folder
            or the runtime folder.
            </summary>
            <param name="assemblyDll">assembly DLL name. Path is required if not in startup or .NET assembly folder</param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssembly(System.Type)">
            <summary>
            Adds an assembly reference from an existing type
            </summary>
            <param name="type">any .NET type that can be referenced in the current application</param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssemblies(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.PortableExecutableReference})">
             <summary>
             Add several reference assemblies in batch.
            
             Useful for use with  Basic.ReferenceAssemblies from Nuget
             to load framework dependencies in Core
            
             Example:
             ReferenceAssemblies.Net60
             ReferenceAssemblies.NetStandard20 
             </summary>
             <param name="references">MetaDataReference or PortableExecutiveReference</param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddAssemblies(System.String[])">
            <summary>
            Adds a list of assemblies to the References
            collection.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddNamespace(System.String)">
            <summary>
            Adds a namespace to the referenced namespaces
            used at compile time.
            </summary>
            <param name="nameSpace"></param>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.AddNamespaces(System.String[])">
            <summary>
            Adds a set of namespace to the referenced namespaces
            used at compile time.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Helper method to invoke a method on an object using Reflection
            </summary>
            <param name="instance">An object instance. You can pass script.ObjectInstance</param>
            <param name="method">The method name as a string</param>
            <param name="parameters">a variable list of parameters to pass</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.CreateInstance">
             <summary>
             Creates an instance of the object specified
             by the GeneratedNamespace and GeneratedClassName.
            
             Sets the ObjectInstance member which is returned
             </summary>
             <returns>Instance of the class or null on error</returns>
        </member>
        <member name="M:Westwind.Scripting.CSharpScriptExecution.GenerateHashCode(System.String)">
            <summary>
            Generates a hashcode for a block of code
            in combination with the compiler mode.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="F:Westwind.Scripting.CSharpScriptExecution.DefaultNamespaces">
            <summary>
            List of default namespaces that are added when adding default references and namespaces
            </summary>
        </member>
        <member name="T:Westwind.Scripting.NamespaceList">
            <summary>
            HashSet of namespaces
            </summary>
        </member>
        <member name="T:Westwind.Scripting.ReferenceList">
            <summary>
            HashSet of References
            </summary>
        </member>
        <member name="T:Westwind.Scripting.RoslynLifetimeManager">
            <summary>
            This helper can help start up Roslyn before first call so that there's no
            long startup delay for first script execution and you can also optionally
            shut Roslyn down and kill the VBCSCompiler that otherwise stays loaded
            even after shutting down your application.
            </summary>
        </member>
        <member name="M:Westwind.Scripting.RoslynLifetimeManager.WarmupRoslyn">
             <summary>
             Run a script execution asynchronously in the background to warm up Roslyn.
             Call this during application startup or anytime before you run the first
             script to ensure scripts execute quickly.
            
             Although this method returns `Task` so it can be tested
             for success, in applications you typically will call this
             without `await` on the result task and just let it operate
             in the background.
             </summary>
        </member>
        <member name="M:Westwind.Scripting.RoslynLifetimeManager.ShutdownRoslyn(System.String)">
            <summary>
            Call this method to shut down the VBCSCompiler if our
            application started it.
            </summary>
        </member>
        <member name="T:Westwind.Scripting.ScriptParser">
             <summary>
             A very simple C# script parser that parses the provided script
             as a text string with embedded expressions and code blocks.
            
             Literal text:
            
             Parsed as plain text into the script output.
             
             Expressions:
            
             {{ DateTime.Now.ToString("d") }}
            
             Code Blocks:
            
             {{% for(int x; x&lt;10; x++  { }}
                 {{ x }}. Hello World
             {{% } }}
             
             </summary>
        </member>
        <member name="M:Westwind.Scripting.ScriptParser.ParseScriptToCode(System.String,System.String,System.String,System.String)">
            <summary>
            Passes in a block of 'script' code into a string using
            code that uses a text writer to output. You can feed the
            output from this method in `ExecuteCode()` or similar to
            parse the script into an output string that includes the
            processed text.
            </summary>
            <param name="scriptText"></param>
            <param name="startDelim">code and expression start delimiter</param>
            <param name="endDelim">code and expression end delimiter</param>
            <param name="codeIndicator">code block indicator that combines the start delim plus this character (ie. default of `%` combines to `{{%`)</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Scripting.ScriptParser.ExecuteScriptAsync(System.String,System.Object,Westwind.Scripting.CSharpScriptExecution,System.String,System.String,System.String)">
             <summary>
             Executes a script that supports {{ expression }} and {{% code block }} syntax
             and returns a string result. This version allows for `async` code inside of
             the template.
            
             You can optionally pass in a pre-configured `CSharpScriptExecution` instance
             which allows setting references/namespaces and can capture error information.
            
             Function returns `null` on error and `scriptEngine.Error` is set to `true`
             along with the error message and the generated code.
             </summary>
             <param name="script">The template to execute that contains C# script</param>
             <param name="model">A model that can be accessed in the template as `Model`. Model is exposed as `dynamic`
             which allows passing any value without requiring type dependencies at compile time.
             
             Pass null if you don't need to access values.</param>
             <param name="scriptEngine">Optional CSharpScriptEngine so you can customize configuration and capture result errors</param>
             <param name="startDelim">Optional start delimiter for script tags</param>
             <param name="endDelim">Optional end delimiter for script tags</param>
             <param name="codeIndicator">Optional Code block indicator that indicates raw code to create in the template (ie. `%` which uses `{{% }}`)</param>
             <returns>expanded template or null. On null check `scriptEngine.Error` and `scriptEngine.ErrorMessage`</returns>
        </member>
        <member name="M:Westwind.Scripting.ScriptParser.ExecuteScript(System.String,System.Object,Westwind.Scripting.CSharpScriptExecution,System.String,System.String,System.String)">
             <summary>
             Executes a script that supports {{ expression }} and {{% code block }} syntax
             and returns a string result.
            
             You can optionally pass in a pre-configured `CSharpScriptExecution` instance
             which allows setting references/namespaces and can capture error information.
            
             Function returns `null` on error and `scriptEngine.Error` is set to `true`
             along with the error message and the generated code.
             </summary>
             <param name="script">The template to execute that contains C# script</param>
             <param name="model">A model that can be accessed in the template as `Model`. Pass null if you don't need to access values.</param>
             <param name="scriptEngine">Optional CSharpScriptEngine so you can customize configuration and capture result errors</param>
             <param name="startDelim">Optional start delimiter for script tags</param>
             <param name="endDelim">Optional end delimiter for script tags</param>
             <param name="codeIndicator">Optional Code block indicator that indicates raw code to create in the template (ie. `%` which uses `{{% }}`)</param>
             <returns>expanded template or null. On null check `scriptEngine.Error` and `scriptEngine.ErrorMessage`</returns>
        </member>
        <member name="M:Westwind.Scripting.ScriptParser.EncodeStringLiteral(System.String,System.Boolean)">
             <summary>
             Encodes a string to be represented as a C# style string literal. 
            
             Example output:
             "Hello \"Rick\"!\r\nRock on"
             </summary>
             <param name="plainString">string to encode</param>
             <param name="addQuotes">if true adds quotes around the encoded text</param>
             <returns></returns>
        </member>
    </members>
</doc>
